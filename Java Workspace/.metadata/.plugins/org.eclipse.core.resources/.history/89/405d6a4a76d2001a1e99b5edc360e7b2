package trees;
class BSTNode
{
	int data;
	BSTNode left;
	BSTNode right;
	BSTNode(int data)
	{
		this.data=data;
	}
}
public class BST {
	BSTNode root;//Root for the Binary Search Tree
	BST()
	{
		root=null;
	}
	BST(int data)
	{
		this.root = new BSTNode(data);
	}
	BSTNode search(BSTNode root, int data)
	{
		if(root==null) return null;
		if(root.data==data) return root; //Either equal
		if(data<root.data) //or smaller
		{
			return search(root.left,data);
		}
		else {
			return search(root.right,data);
		}
	}
	boolean searchItr(BSTNode root, int data)
	{
		if(root==null) return false;
		
		while(root!=null)
		{
			if(data==root.data)
			{
				return true;
			}
			else if(data<root.data)
			{
				root=root.left;
			}
			else
			{
				root=root.right;
			}
		}
		return false;
	}
	BSTNode insert(BSTNode root, int data)
	{
		if(root==null) 
		{
			return new BSTNode(data);
		}
		if(data<=root.data)
		{
			root.left = insert(root.left,data); //Insert Data to the left sub tree
		}
		else {
			root.right = insert(root.right,data);
		}
		return root;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BST bst = new BST();
		bst.root = bst.insert(bst.root,15);//Receive the updated root
		System.out.println(bst.root.data);
		bst.root = bst.insert(bst.root,10);
		bst.root = bst.insert(bst.root,17);
//		System.out.println(bst.root.right.data);
		System.out.println(bst.searchItr(bst.root, 17));
		System.out.println(bst.searchItr(bst.root, 19));
		System.out.println(bst.search(bst.root, 17));
	}

}
